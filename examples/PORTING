-1. text_view: #get_window => #get_window_text_view
    but this is a special name mangling introduced by the binding
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

0. w#as_widget => w
   (thanks to methods always taking #class in input in place
   of class)

1. #show => #misc#show
2. #grab_default => #misc#grab_default

3. Separator/Box:
     #pack => #add
     #pack ~padding:5 => (fun w -> hbox#pack_start w false true (*~padding:*)5)
4. Notebook:
     #append_page w => #append_page w None
     #switch_page (fun i -> ..) => #switch_page (fun w i -> ..)
4. Table:
     #attach => Lablgtk3Compat.attach

5. AboutDialog:
     ~name => ~program_name
5. Table:
     ~columns => ~n_columns
     ~rows => ~n_rows
     ~row_spacings => ~row_spacing
     ~col_spacings => ~column_spacing
5. LinkButton:
     uri => ~uri
5. Dialog
    #vbox => #get_content_area
5. ScrolledWindow
    ~hpolicy => ~hscrollbar_policy

5.5 Dialogs used polymorphic variants in place of numbers;
    added Lablgtk3Compat.encode_decode (see spin.ml) as an
    half-baked solution

5.5. add_button_stock `OK `OK =>
     w#add_button (GtkStock.convert_id `OK) (encode `OK)
     (visible in spin.ml)

6. a window w is not a #container, but it can be casted to it
   (e.g. in example button.ml). It used to be a #container instead.
   The problem is due to #connect: window signals inherit from container
   signals, but a cast is required. How did it work without before?

7. adjustments only at the low level: add #as_adjustment where there should
   be no one (e.g. counter.ml)
7. text_buffer only at the low level: add #as_text_buffer where there should
   be no one (e.g. gioredirect.ml)

8. about.ml: run no longer takes a () (visible in dialog.ml)
8. ProgressBar: #pulse no longer takes a ()

9. window#event#connect => window#connect

10. GtkButtonProps.Button.S.activate => Button.S.activate

11. Assistant: #npage returns an option now
11. Action: #get_widget returns an option now

12. GFile.filter => FileFilterG.file_filter
13. toolbar ~style => toolbar ~toolbar_style
    toolbar#insert f => toolbar#insert f ~-1
14. window ~position => ~window_position

============= TO TEST ==================
1. output of button.exe: is it the expected one?
   same for counter.exe: maybe wrong default somewhere?
2. output of about.exe: it seems strange
3. output of assistant.exe: it is correct?
4. assistant_tutorial: is it working properly?
5. cgets.ml: what should it do?
6. signal_override.ml: what should it do?
7. dcalendar.ml: test after implementation finished
8. nihongo.ml: what does it do with colors? Not working it seems

============= TODO (XXX) ==================
1. radiobutton.ml: #get_group
3. button.ml: ~use_mnemonic ~stock
4. about.ml: ~authors
8. seppala.ml: add_accel_group type mismatch
9. expander.ml: type mismatch (used Obj.magic)
9. events2.ml: type mismatch (used Obj.magic)
11. dcalendar.ml: (APIStruct) isn't implemented yet
    events2.ml: (APIStruct) isn't implemented yet
    events.ml: (APIStruct) isn't implemented yet
13. kaimono.ml: FileChooserDialog (interface not implemented?)
14. Many XXX in Lablgtk3Compat.factory
15. nihongo.ml: type mismatch
16. application/browser.ml:
     - FileChooser?
     - #create_tag
17. dialog_thread: bugged (see below)
18. drawing.ml: Obj.magic for Cairo

GText.{view,buffer} ==> ??? (several files in too_hard_to_port)
socket.ml: what the hell is this example trying to do?

============= TOO HARD ==================
1. action.ml: methods throwing exceptions not implemented yet

============= Document ==================
1. inheritance in OCaml does not respect late binding
   (assuming Glib to have late binding; I think this is the case
   at least for interfaces)
2. methods with introspectable="0" in Gir (e.g. methods expecting varargs) like TextBuffer.create_tag are not generated

============= Bugs ==================
+inf  we use an Obj.magic to help the type checker in case of methods calling new on the class
      being defined. It should be got rid of (probably by defining the recursive class types in advance)

-2. (dcalendar.exe:1551223): Gtk-WARNING **: 14:25:00.462: Negative content width -18 (allocation 16, extents 17x17) while allocating gadget (node button, owner GtkButton)
-1. (cgets.exe:1421601): Gdk-WARNING **: 02:22:59.657: ../../../../../gdk/wayland/gdkselection-wayland.c:275: error reading selection buffer: Operation was cancelled
0. (scrolledwin.exe:1306065): Gtk-CRITICAL **: 21:35:13.609: gtk_widget_grab_default: assertion 'gtk_widget_get_can_default (widget)' failed
0.5 universal type quantification in method types is generated correctly only for input types but not for output types.
   E.g. (not visible in this branch):
   method get_path_at_pos : int -> int -> (bool * TreePathT.t option * ([> TreeViewColumnT.t] as 'c) Gobject.obj option * int * int) = 
    fun d e -> TreeView.get_path_at_pos obj d e
   it should be instead
   method get_path_at_pos : 'c. int -> int -> (bool * TreePathT.t option * ([> TreeViewColumnT.t] as 'c) Gobject.obj option * int * int) = 
    fun d e -> TreeView.get_path_at_pos obj d e

  NOW IS:
  (* Could not generate method IconView::create_drag_icon *)
  (* Error was : Not implemented: "(outParamOcamlType) can't handle this type" *)
1. RadioButtonG get_group not implemented (GSList *)
   AboutDialog authors not implemented (TCArray)
   TextView (APIStruct) isn't implemented yet
   UIManager.add_ui_from_string not implemented (* "Methods throwing exceptions are not implemented yet" *) (visible in action.ml)
4. Adjustments only exist at the low level
   File "counter.ml", line 28, characters 37-40:
   28 | let sc = HScaleG.h_scale ~adjustment:adj ~draw_value:false
   Error: This expression has type GData.adjustment
          but an expression was expected of type Types.adjustment Gtk.obj
   - Also in sping_button#set_adjustment
   - Also text_view#buffer
6. add_accel_group: function type mismatch
   visible in seppala.ml
7. type mismatch
   File "expander.ml", line 14, characters 40-46:
   14 |   let icon = ImageG.image ~pixbuf:(Some pixbuf) ~packing:e#add () in
                                                ^^^^^^
   Error: This expression has type GdkPixbuf.pixbuf = [ `pixbuf ] Gtk.obj
          but an expression was expected of type
            GIGdkPixbuf.Types.pixbuf Gtk.obj
          Type [ `pixbuf ] is not compatible with type
            GIGdkPixbuf.Types.pixbuf = [ `giu | `pixbuf ] 
          The first variant type does not allow tag(s) `giu
   visible in expander.ml
8. (*XXX BUGGED: it should encode enum GtkResponseType using numbers from -1 to -12
and the same used by C because "MessageDialogG.message_dialog ~buttons" expects
this behaviour. Moreover one cannot add the buttons later to MessageDialogs*)
   visible in dialog_thread.ml
9. Obj.magic needed to cast types of external libraries (e.g. Cairo)
   visible in drawing.ml, fifteen.ml, etc.

============== APIStruct implementation =========
simple example CellArea::get_cell_allocation, APIStruct GdkRectangle

#define Make_Extractor(name,conv1,field,conv2) \
CAMLprim value ml_##name##_##field (value val) \
{ return conv2 ((conv1(val))->field); }

#define GdkRectangle_val(val) ((GdkRectangle*)MLPointer_val(val))
#define Val_GdkRectangle Val_pointer

/* Rectangle */

CAMLprim value ml_GdkRectangle (value x, value y, value width, value height)
{
    GdkRectangle rectangle;
    rectangle.x = Int_val(x);
    rectangle.y = Int_val(y);
    rectangle.width = Int_val(width);
    rectangle.height = Int_val(height);
    return Val_copy(rectangle);
}

Make_Extractor (GdkRectangle, GdkRectangle_val, x, Val_int)
Make_Extractor (GdkRectangle, GdkRectangle_val, y, Val_int)
Make_Extractor (GdkRectangle, GdkRectangle_val, width, Val_int)
Make_Extractor (GdkRectangle, GdkRectangle_val, height, Val_int)

module Rectangle = struct
  type t
  external create : x:int -> y:int -> width:int -> height:int -> t
      = "ml_GdkRectangle"
  external x : t -> int = "ml_GdkRectangle_x"
  external y : t -> int = "ml_GdkRectangle_y"
  external width : t -> int = "ml_GdkRectangle_width"
  external height : t -> int = "ml_GdkRectangle_height"
end

============= Notes ==================
1. Widget.size_params is an exeption w.r.t. Widget.make_params
   Consequence:use ~width in place of ~width_request.
   Why??
