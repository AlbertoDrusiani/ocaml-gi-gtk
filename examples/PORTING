0. w#as_widget => w
   (thanks to methods always taking #class in input in place
   of class)

1. #show => #misc#show
2. #grab_default => #misc#grab_default

3. Separator/Box:
     #pack => #add
     #pack ~padding:5 => (fun w -> hbox#pack_start w false true (*~padding:*)5)
4. Notebook:
     #append_page w => #append_page w None
     #switch_page (fun i -> ..) => #switch_page (fun w i -> ..)
4. Table:
     #attach => Lablgtk3Compat.attach

5. AboutDialog:
     ~name => ~program_name
5. Table:
     ~columns => ~n_columns
     ~rows => ~n_rows
     ~row_spacings => ~row_spacing
     ~col_spacings => ~column_spacing
5. LinkButton:
     uri => ~uri
5. Dialog
    #vbox => #get_content_area
5. ScrolledWindow
    ~hpolicy => ~hscrollbar_policy

6. a window w is not a #container, but it can be casted to it
   (e.g. in example button.ml). It used to be a #container instead.
   The problem is due to #connect: window signals inherit from container
   signals, but a cast is required. How did it work without before?

7. adjustments only at the low level: add #as_adjustment where there should
   be no one (e.g. counter.ml)

8. about.ml: run no longer takes a () (visible in dialog.ml)
8. ProgressBar: #pulse no longer takes a ()

9. window#event#connect => window#connect

10. GtkButtonProps.Button.S.activate => Button.S.activate

11. Assistant: #npage returns an option now
11. Action: #get_widget returns an option now

12. GFile.filter => FileFilterG.file_filter

============= TO TEST ==================
1. output of button.exe: is it the expected one?
   same for counter.exe: maybe wrong default somewhere?
2. output of about.exe: it seems strange
3. output of assistant.exe: it is correct?
4. assistant_tutorial is surely not working properly because
   of XXX
5. cgets.ml: what should it do?

============= TODO (XXX) ==================
1. radiobutton.ml: #get_group
2. entry.ml: #select_region
3. button.ml: ~use_mnemonic ~stock
4. about.ml: ~authors
5. fifteen.ml: window#event#connect#key_press
6. calc.ml: window#event#connect#key_press
7. hello.ml: window#event#connect#delete
7. dcalendar.ml: window#event#connect#delete
8. seppala.ml: add_accel_group type mismatch
9. expander.ml: type mismatch (used Obj.magic)
10. assistant_tutorial.ml: Entry is not Editable

GText.{view,buffer} ==> ??? (several files in too_hard_to_port)
socket.ml: what the hell is this example trying to do?

============= TOO HARD ==================
1. action.ml: methods throwing exceptions not implemented yet

============= Bugs ==================
-1. (cgets.exe:1421601): Gdk-WARNING **: 02:22:59.657: ../../../../../gdk/wayland/gdkselection-wayland.c:275: error reading selection buffer: Operation was cancelled
0. (scrolledwin.exe:1306065): Gtk-CRITICAL **: 21:35:13.609: gtk_widget_grab_default: assertion 'gtk_widget_get_can_default (widget)' failed
1. RadioButtonG get_group not implemented (GSList *)
   AboutDialog authors not implemented (TCArray)
   UIManager.add_ui_from_string not implemented (* "Methods throwing exceptions are not implemented yet" *) (visible in action.ml)
2. Inheritance from interfaces not implemented (e.g. Entry is an Editable)
3. Additional constructors not implemented (e.g. Buttong.new_with_mnemonic)
4. Adjustments only exist at the low level
   File "counter.ml", line 28, characters 37-40:
   28 | let sc = HScaleG.h_scale ~adjustment:adj ~draw_value:false
   Error: This expression has type GData.adjustment
          but an expression was expected of type Types.adjustment Gtk.obj
5. window#event#connect#key_press ~callback ==> ???
   window#event#connect#delete ==> ???
6. add_accel_group: function type mismatch
   visible in seppala.ml
7. type mismatch
   File "expander.ml", line 14, characters 40-46:
   14 |   let icon = ImageG.image ~pixbuf:(Some pixbuf) ~packing:e#add () in
                                                ^^^^^^
   Error: This expression has type GdkPixbuf.pixbuf = [ `pixbuf ] Gtk.obj
          but an expression was expected of type
            GIGdkPixbuf.Types.pixbuf Gtk.obj
          Type [ `pixbuf ] is not compatible with type
            GIGdkPixbuf.Types.pixbuf = [ `giu | `pixbuf ] 
          The first variant type does not allow tag(s) `giu
   visible in expander.ml


============= Notes ==================
1. Widget.size_params is an exeption w.r.t. Widget.make_params
   Consequence:use ~width in place of ~width_request.
   Why??
